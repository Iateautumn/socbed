#!/usr/bin/env bash

NUM_ITERATIONS=1

epoch() { date "+%s"; }
isotime() { date -u -d @$1 "+%Y-%m-%dT%H:%M:%SZ"; }
#isotime () { date -ur $1 "+%Y-%m-%dT%H:%M:%SZ"; } # variant for macOS
isonow() { date -u "+%Y-%m-%dT%H:%M:%SZ"; }

for i in $(seq 1 $NUM_ITERATIONS); do
  start=$(epoch)
  end=$(($start + 3600))

  echo "$(isotime $start) Starting session $i..."
  vmconsole -c start_session 2>"vmconsole_$i.log"

  echo "$(isonow) Waiting until 15 minutes passed..."
  # sleep $(( $start + 900 - $(epoch) ))

  echo "$(isonow) Running multi-step attack (pausing 3 minutes between steps)..."

  # Attack steps
  commands=(
    "info_nmap_host_discovery"
    "info_nmap_portscan"
    "info_nmap_service_discovery"
    "info_network_gather"
    "info_directory_discovery"
    "info_url_fingerprint"
    "info_ssh_bruteforce"
    "exp_dvwa_webshell"
    "exp_laravel_rce"
    "impact_ransomware"
    "impact_tomcat_dos"
    "priv_escalation_suid"
    "discovery_network_gather"
    "lateral_exp_nexus_rce"
    "c2_info_discovery"
  )
  step=1
  for attack in "${commands[@]}"; do
    attack_start=$(epoch)
    echo "$(isonow) running attack: $attack"
    if [ "$attack" == "info_url_fingerprint" ]; then
      echo -e "use $attack\nrun\nset target http://172.18.0.2/dvwa/\nrun\nback" | attackconsole -l "attackconsole_$i.log" >>"attackconsole_$i.stdout"
    else
      echo -e "use $attack\nrun\nback" | attackconsole -l "attackconsole_$i.log" >>"attackconsole_$i.stdout"
    fi
    sleep 5 # Delay 5 seconds before recording end time
    attack_end=$(epoch)
    echo "$(isonow) Attack $attack completed. Start: $(isotime $attack_start), End: $(isotime $attack_end)"
    ../download_logs.py download --start $(isotime $attack_start) --end $(isotime $attack_end) --suffix $attack
    remaining=$(($start + 180 * $step - $(epoch)))
    [ $remaining -gt 0 ] && echo "$(isonow) sleep duration: $remaining seconds" && sleep $remaining
    step=$(($step + 1))
  done

  echo "$(isonow) Waiting until 65 minutes passed..."
  sleep $(($start + 3600 + 300 - $(epoch)))

  echo "$(isonow) Downloading logs..."
  ../download_logs.py download --start $(isotime $start) --end $(isotime $end) --suffix $i
  ./audit.sh

  echo "$(isonow) Closing session..."
  vmconsole -c close_session 2>>"vmconsole_$i.log"

  echo "$(isonow) Done."
done
